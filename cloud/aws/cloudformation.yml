AWSTemplateFormatVersion: '2010-09-09'
Description: AI Baseball Coach Cloud Infrastructure

Parameters:
  ProjectName:
    Type: String
    Default: AI_Baseball_Coach

Resources:
  S3BucketForVideos:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ProjectName}-videos-${AWS::Region}'
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0c55b159cbfafe1f0
      InstanceType: t2.medium
      KeyName: ai_baseball_coach_key
      SecurityGroups:
        - !Ref InstanceSecurityGroup

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  RDSPostgreSQLInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: aibaseballcoachdb
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.small
      Engine: postgres
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

  DBSecurityGroup:
    Type: 'AWS::RDS::DBSecurityGroup'
    Properties:
      DBSecurityGroupIngress:
        - CIDRIP: 0.0.0.0/0
      GroupDescription: Open database for access

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_handlers.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketForVideos
        S3Key: lambda_handlers.js
      Runtime: nodejs12.x
      Timeout: '30'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${S3BucketForVideos}/*'
        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket to store videos
    Value: !Ref S3BucketForVideos

  EC2InstancePublicIp:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp

  RDSInstanceEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt RDSPostgreSQLInstance.Endpoint.Address

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref LambdaFunction

  LambdaFunctionARN:
    Description: ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn

  LambdaExecutionRoleARN:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn